CONNECT '/opt/firebird/hotel.fdb' USER 'SYSDBA' PASSWORD 'SYSDBA';

-- Guest Table
CREATE TABLE Guest (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR(50) NOT NULL,
    LastName VARCHAR(70) NOT NULL,
    PhoneNumber VARCHAR(20) NOT NULL UNIQUE
);

-- Department Table
CREATE TABLE Department (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR(100) NOT NULL CHECK (Name IN ('IT', 'Housekeeping', 'Food & Beverage', 'Maintenance', 'Human Resources')),
    MaxEmployeeCount INTEGER NOT NULL CHECK (MaxEmployeeCount > 0)
);

-- Building Table with reference to Department
CREATE TABLE Building (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR(100) NOT NULL CHECK (Name IN ('Building A', 'Building B', 'Building C', 'Building D', 'Building E')),
    City VARCHAR(100) NOT NULL CHECK (City IN ('Los Angeles', 'Manhattan', 'Bydgoszcz', 'Brooklyn')),
    DepartmentID INTEGER NOT NULL REFERENCES Department(ID) ON DELETE CASCADE
);

-- Room Table with reference to Building
CREATE TABLE Room (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RoomNumber INTEGER UNIQUE NOT NULL,
    BedCount INTEGER NOT NULL CHECK (BedCount BETWEEN 1 AND 6),
    Price DECIMAL(10, 2) NOT NULL CHECK (Price >= 0),
    IsAvailable SMALLINT NOT NULL CHECK (IsAvailable IN (0, 1)),
    BuildingID INTEGER NOT NULL REFERENCES Building(ID) ON DELETE CASCADE
);

-- Reservation Table with references to Guest and Room
CREATE TABLE Reservation (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    GuestID INTEGER NOT NULL REFERENCES Guest(ID) ON DELETE CASCADE,
    RoomID INTEGER NOT NULL REFERENCES Room(ID) ON DELETE CASCADE,
    CheckInDate DATE NOT NULL,
    CheckOutDate DATE NOT NULL CHECK (CheckOutDate > CheckInDate)
);

-- Employee Table with SupervisorID referencing itself and DepartmentID referencing Department
CREATE TABLE Employee (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Role VARCHAR(50) NOT NULL CHECK (Role IN ('Manager', 'Receptionist', 'Housekeeper', 'Cook')),
    HireDate DATE NOT NULL,
    HourlyRate DECIMAL(10, 2) NOT NULL CHECK (HourlyRate >= 0),
    SupervisorID INTEGER REFERENCES Employee(ID) ON DELETE CASCADE,
    DepartmentID INTEGER NOT NULL REFERENCES Department(ID) ON DELETE CASCADE
);

-- Unique tables for each role with specific attributes

CREATE TABLE Manager (
    EmployeeID INTEGER PRIMARY KEY REFERENCES Employee(ID) ON DELETE CASCADE,
    Department VARCHAR(100) NOT NULL CHECK (Department IN ('IT', 'Housekeeping', 'Food & Beverage', 'Maintenance', 'Human Resources')),
    BuildingName VARCHAR(100) NOT NULL CHECK (BuildingName IN ('Building A', 'Building B', 'Building C', 'Building D', 'Building E'))
);

CREATE TABLE Receptionist (
    EmployeeID INTEGER PRIMARY KEY REFERENCES Employee(ID) ON DELETE CASCADE,
    Languages VARCHAR(100) NOT NULL
);

CREATE TABLE Housekeeper (
    EmployeeID INTEGER PRIMARY KEY REFERENCES Employee(ID) ON DELETE CASCADE,
    AssignedFloor INTEGER NOT NULL CHECK (AssignedFloor > 0)
);

CREATE TABLE Cook (
    EmployeeID INTEGER PRIMARY KEY REFERENCES Employee(ID) ON DELETE CASCADE,
    Specialty VARCHAR(100) NOT NULL CHECK (Specialty IN ('Baking', 'Sushi', 'Sea cuisine'))
);

-- EmployeeHoursWorked Table with reference to Employee
CREATE TABLE EmployeeHoursWorked (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EmployeeID INTEGER NOT NULL REFERENCES Employee(ID) ON DELETE CASCADE,
    HoursWorked INTEGER NOT NULL CHECK (HoursWorked >= 0),
    WorkDate DATE NOT NULL
);

-- Service Table with optional reference to Reservation
CREATE TABLE Service (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ServiceType VARCHAR(50) CHECK (ServiceType IN ('Cleaning', 'Food Service', 'Housekeeping', 'Birthday Surprise', 'Child Care Taking')),
    TotalCost DECIMAL(10, 2) DEFAULT 0 CHECK (TotalCost >= 0),
    EmployeeID INTEGER REFERENCES Employee(ID) ON DELETE CASCADE,
    ReservationID INTEGER REFERENCES Reservation(ID) ON DELETE CASCADE
);

-- Payment Table with computed TotalAmount field
CREATE TABLE Payment (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    AmenitiesCost DECIMAL(10, 2) DEFAULT 0 CHECK (AmenitiesCost >= 0),
    ServiceCost DECIMAL(10, 2) DEFAULT 0 CHECK (ServiceCost >= 0),
    TotalAmount DECIMAL(10, 2) DEFAULT 0 CHECK (TotalAmount >= 0),
    PaymentDate DATE NOT NULL,
    ReservationID INTEGER NOT NULL REFERENCES Reservation(ID) ON DELETE CASCADE
    
);

-- Amenity Table with Reservation reference
CREATE TABLE Amenity (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ReservationID INTEGER REFERENCES Reservation(ID) ON DELETE CASCADE,
    AmenityType VARCHAR(50) CHECK (AmenityType IN ('Swimming Pool', 'Fitness Center')),
    TotalCost DECIMAL(10, 2) DEFAULT 0 CHECK (TotalCost >= 0)
);

-- UserRating Table with restricted BuildingName choices
CREATE TABLE UserRating (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    BuildingName VARCHAR(100) CHECK (BuildingName IN ('Building A', 'Building B', 'Building C', 'Building D', 'Building E')),
    CityName VARCHAR(100) CHECK (CityName IN ('Los Angeles', 'Manhattan', 'Bydgoszcz', 'Brooklyn')),
    Rating INTEGER CHECK (Rating BETWEEN 1 AND 5),
    BuildingID INTEGER REFERENCES Building(ID) ON DELETE CASCADE
);



-------------------     Uzupe≈Çnianie tabel      ------------------------------

--ls
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('IT', 15);
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Housekeeping', 50);
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Food & Beverage', 40);
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Maintenance', 25);


--man
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Housekeeping', 45);
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Food & Beverage', 30);
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Maintenance', 15);


--byd
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Housekeeping', 20);
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Food & Beverage', 40);
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Maintenance', 25);
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Human Resources', 15);

--brook
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Housekeeping', 60);
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Food & Beverage', 30);
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Maintenance', 10);
INSERT INTO Department (Name, MaxEmployeeCount) VALUES('Human Resources', 30);

-- Dane dla tabeli Building
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building A', 'Los Angeles', 1);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building B', 'Los Angeles', 2);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building C', 'Los Angeles', 3);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building D', 'Los Angeles', 4);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building A', 'Manhattan', 5);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building B', 'Manhattan', 6);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building C', 'Manhattan', 7);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building A', 'Bydgoszcz', 8);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building B', 'Bydgoszcz', 9);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building C', 'Bydgoszcz', 10);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building D', 'Bydgoszcz', 11);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building E', 'Bydgoszcz', 12);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building A', 'Brooklyn', 13);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building B', 'Brooklyn', 14);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building C', 'Brooklyn', 15);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building D', 'Brooklyn', 16);
INSERT INTO Building (Name, City, DepartmentID) VALUES('Building E', 'Brooklyn', 17);


--rooms
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(111, 2, 160.00, 1, 1);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(112, 3, 210.00, 1, 1);

-- Building B, City: Los Angeles (DepartmentID: 2)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(113, 1, 95.00, 1, 2);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(114, 4, 240.00, 1, 2);

-- Building C, City: Los Angeles (DepartmentID: 3)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(115, 2, 150.00, 1, 3);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(116, 3, 200.00, 1, 3);

-- Building D, City: Los Angeles (DepartmentID: 4)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(117, 5, 290.00, 1, 4);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(118, 6, 350.00, 1, 4);

INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(117, 5, 290.00, 1, 5);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(118, 6, 350.00, 1, 5);

-- Building A, City: Manhattan (DepartmentID: 2)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(119, 2, 175.00, 1, 6);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(120, 3, 220.00, 1, 6);

-- Building B, City: Manhattan (DepartmentID: 3)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(121, 4, 270.00, 1, 7);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(122, 1, 110.00, 1, 7);

-- Building C, City: Manhattan (DepartmentID: 4)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(123, 2, 160.00, 1, 8);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(124, 5, 320.00, 1, 8);

-- Building A, City: Bydgoszcz (DepartmentID: 2)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(125, 1, 95.00, 1, 9);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(126, 4, 250.00, 1, 9);

-- Building B, City: Bydgoszcz (DepartmentID: 2)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(127, 3, 190.00, 1, 10);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(128, 2, 145.00, 1, 10);

-- Building C, City: Bydgoszcz (DepartmentID: 3)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(129, 5, 305.00, 1, 11);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(130, 2, 160.00, 1, 11);

-- Building D, City: Bydgoszcz (DepartmentID: 4)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(131, 3, 190.00, 1, 12);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(132, 6, 350.00, 1, 12);

-- Building E, City: Bydgoszcz (DepartmentID: 5)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(133, 2, 140.00, 1, 13);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(134, 3, 200.00, 1, 13);

-- Building A, City: Brooklyn (DepartmentID: 2)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(135, 1, 85.00, 1, 14);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(136, 4, 230.00, 1, 14);

-- Building B, City: Brooklyn (DepartmentID: 2)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(137, 3, 200.00, 1, 15);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(138, 2, 170.00, 1, 15);

-- Building C, City: Brooklyn (DepartmentID: 3)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(139, 5, 320.00, 1, 16);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(140, 2, 145.00, 1, 16);

-- Building D, City: Brooklyn (DepartmentID: 4)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(141, 6, 350.00, 1, 17);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(142, 3, 180.00, 1, 17);

-- Building E, City: Brooklyn (DepartmentID: 5)
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(143, 2, 160.00, 1, 18);
INSERT INTO Room (RoomNumber, BedCount, Price, IsAvailable, BuildingID) VALUES(144, 3, 210.00, 1, 18);


-- Dane dla tabeli Employee
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Jan Kowalski', 'Manager', '2020-01-15', 50.00, NULL, 1);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Anna Nowak', 'Receptionist', '2021-03-20', 25.00, 1, 2);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Piotr Wi≈õniewski', 'Housekeeper', '2022-05-10', 20.00, 2, 3);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Maria DƒÖbrowska', 'Cook', '2021-07-05', 30.00, 1, 4);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Tomasz Lewandowski', 'Manager', '2019-11-30', 55.00, NULL, 5);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Katarzyna Zieli≈Ñska', 'Receptionist', '2022-02-14', 26.00, 5, 1);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Micha≈Ç Szyma≈Ñski', 'Housekeeper', '2023-04-22', 21.00, 3, 2);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Agnieszka Koz≈Çowska', 'Cook', '2020-09-18', 32.00, 5, 3);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Robert Jankowski', 'Manager', '2018-06-25', 60.00, NULL, 4);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Barbara Wojciechowska', 'Receptionist', '2021-12-05', 27.00, 9, 5);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Adam Mazur', 'Housekeeper', '2022-08-17', 22.00, 8, 1);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Ewa Kwiatkowska', 'Cook', '2021-01-30', 33.00, 9, 2);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Krzysztof Pawlak', 'Manager', '2019-04-12', 58.00, NULL, 3);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Monika G√≥rska', 'Receptionist', '2022-10-08', 28.00, 13, 4);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Pawe≈Ç Dudek', 'Housekeeper', '2023-01-25', 23.00, 12, 5);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Dorota Grabowska', 'Cook', '2020-05-14', 34.00, 13, 1);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Marcin Nowicki', 'Manager', '2018-12-03', 62.00, NULL, 2);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Aleksandra Adamczyk', 'Receptionist', '2021-09-22', 29.00, 17, 3);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Rafa≈Ç Kowalczyk', 'Housekeeper', '2022-06-30', 24.00, 16, 4);
INSERT INTO Employee (Name, Role, HireDate, HourlyRate, SupervisorID, DepartmentID) VALUES('Magdalena W√≥jcik', 'Cook', '2021-03-07', 35.00, 17, 5);

-- Dane dla tabeli Manager
INSERT INTO Manager (EmployeeID, Department, BuildingName) VALUES(1, 'IT', 'Building A');
INSERT INTO Manager (EmployeeID, Department, BuildingName) VALUES(5, 'Human Resources', 'Building E');
INSERT INTO Manager (EmployeeID, Department, BuildingName) VALUES(9, 'Maintenance', 'Building D');
INSERT INTO Manager (EmployeeID, Department, BuildingName) VALUES(13, 'Food & Beverage', 'Building C');
INSERT INTO Manager (EmployeeID, Department, BuildingName) VALUES(17, 'Housekeeping', 'Building B');

-- Dane dla tabeli Receptionist
INSERT INTO Receptionist (EmployeeID, Languages) VALUES(2, 'English, Polish');
INSERT INTO Receptionist (EmployeeID, Languages) VALUES(6, 'German, English');
INSERT INTO Receptionist (EmployeeID, Languages) VALUES(10, 'Spanish, French');
INSERT INTO Receptionist (EmployeeID, Languages) VALUES(14, 'Italian, Russian');
INSERT INTO Receptionist (EmployeeID, Languages) VALUES(18, 'Chinese, Japanese');

-- Dane dla tabeli Housekeeper
INSERT INTO Housekeeper (EmployeeID, AssignedFloor) VALUES(3, 1);
INSERT INTO Housekeeper (EmployeeID, AssignedFloor) VALUES(7, 2);
INSERT INTO Housekeeper (EmployeeID, AssignedFloor) VALUES(11, 3);
INSERT INTO Housekeeper (EmployeeID, AssignedFloor) VALUES(15, 4);
INSERT INTO Housekeeper (EmployeeID, AssignedFloor) VALUES(19, 5);

-- Dane dla tabeli Cook
INSERT INTO Cook (EmployeeID, Specialty) VALUES(4, 'Sea cuisine');
INSERT INTO Cook (EmployeeID, Specialty) VALUES(8, 'Baking');
INSERT INTO Cook (EmployeeID, Specialty) VALUES(12, 'Sushi');
INSERT INTO Cook (EmployeeID, Specialty) VALUES(16, 'Sea cuisine');
INSERT INTO Cook (EmployeeID, Specialty) VALUES(20, 'Baking');

-- Dane dla tabeli EmployeeHoursWorked
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(1, 8, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(2, 7, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(3, 6, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(4, 8, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(5, 8, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(6, 7, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(7, 6, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(8, 8, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(9, 7, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(10, 6, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(11, 8, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(12, 7, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(13, 8, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(14, 6, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(15, 7, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(16, 8, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(17, 7, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(18, 6, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(19, 8, '2024-12-01');
INSERT INTO EmployeeHoursWorked (EmployeeID, HoursWorked, WorkDate) VALUES(20, 7, '2024-12-01');

- - - - - - - - - - - - - - - - - -
inner join

SELECT 
    Room.RoomNumber, 
    Room.BedCount, 
    Building.Name AS BuildingName 
FROM 
    Room 
INNER JOIN 
    Building 
ON 
    Room.BuildingID = Building.ID;

- - - - - - - - - - - - - - - - - -


Outer join


SELECT 
    E1.Name AS EmployeeName, 
    E2.Name AS SupervisorName 
FROM 
    Employee E1 
LEFT JOIN 
    Employee E2 
ON 
    E1.SupervisorID = E2.ID;

- - - - - - - - - - - - - - - - - -

grupowanie 


SELECT 
    Building.Name AS BuildingName, 
    COUNT(Room.ID) AS RoomCount 
FROM 
    Room 
INNER JOIN 
    Building 
ON 
    Room.BuildingID = Building.ID 
GROUP BY 
    Building.Name;


- - - - - - - - - - - - - - - - - -

Sortowanie

SELECT 
    Name, 
    LastName 
FROM 
    Guest 
ORDER BY 
    LastName ASC, Name ASC;

- - - - - - - - - - - - - - - - - -

podzapytanie skorelowane 


SELECT 
    RoomNumber, 
    Price 
FROM 
    Room R1 
WHERE 
    Price < (
        SELECT 
            AVG(R2.Price) 
        FROM 
            Room R2 
        WHERE 
            R2.BuildingID = R1.BuildingID
    );


- - - - - - - - - - - - - - - - - -

podzapytanie nieskorelowane 

SELECT 
    RoomNumber, 
    Price 
FROM 
    Room 
WHERE 
    Price > (
        SELECT 
            AVG(Price) 
        FROM 
            Room
    );


- - - - - - - - - - - - - - - - - -

having

SELECT 
    Building.Name AS BuildingName, 
    COUNT(Room.ID) AS RoomCount 
FROM 
    Room 
INNER JOIN 
    Building 
ON 
    Room.BuildingID = Building.ID 
GROUP BY 
    Building.Name 
HAVING 
    COUNT(Room.ID) > 10;


- - - - - - - - - - - - - - - - - -

in


SELECT 
    Name, 
    LastName, 
    PhoneNumber 
FROM 
    Guest 
WHERE 
    PhoneNumber IN ('222333444', '987654321');


- - - - - - - - - - - - - - - - - -

any

SELECT 
    RoomNumber, 
    Price 
FROM 
    Room 
WHERE 
    Price > ANY (
        SELECT 
            Price 
        FROM 
            Room 
        INNER JOIN 
            Building 
        ON 
            Room.BuildingID = Building.ID 
        WHERE 
            Building.Name = 'Building A'
    );

- - - - - - - - - - - - - - - - - -
all


SELECT 
    RoomNumber, 
    Price 
FROM 
    Room 
WHERE 
    Price > ALL (
        SELECT 
            Price 
        FROM 
            Room 
        INNER JOIN 
            Building 
        ON 
            Room.BuildingID = Building.ID 
        WHERE 
            Building.Name = 'Building B'
    );

- - - - - - - - - - - - - - - - - -


Exists 

SELECT 
    Name AS BuildingName 
FROM 
    Building 
WHERE 
    EXISTS (
        SELECT 
            1 
        FROM 
            Room 
        WHERE 
            Room.BuildingID = Building.ID
    );

- - - - - - - - - - - - - - - - - -


like 

SELECT 
    Name, 
    LastName 
FROM 
    Guest 
WHERE 
    LastName LIKE 'S%';





================PROCEDURA=======================================
SET TERM ^ ;

CREATE OR ALTER PROCEDURE MarkRoomAsUnavailable (
    RoomIDInput INTEGER
)
AS
BEGIN
    UPDATE Room
    SET IsAvailable = 0
    WHERE ID = :RoomIDInput;
END^

SET TERM ; ^


============PROCEDURA===========================================

SET TERM ^ ;
CREATE OR ALTER PROCEDURE MarkRoomAsAvailable (
    RoomIDInput INTEGER
)
AS
DECLARE VARIABLE CurrentDate DATE;
BEGIN
    -- Pobierz aktualnƒÖ datƒô
    CurrentDate = CURRENT_DATE;

    -- Zmie≈Ñ status pokoju na dostƒôpny, je≈õli rezerwacja zako≈Ñczy≈Ça siƒô
    UPDATE Room
    SET IsAvailable = 1
    WHERE ID = :RoomIDInput
      AND NOT EXISTS (
          SELECT 1
          FROM Reservation
          WHERE RoomID = :RoomIDInput
            AND CheckOutDate >= :CurrentDate
      );
END^
SET TERM ; ^



===================WYZWALACZ====================================


SET TERM ^ ;
CREATE OR ALTER TRIGGER AfterInsertReservation
AFTER INSERT ON Reservation
AS
BEGIN
    EXECUTE PROCEDURE MarkRoomAsUnavailable(NEW.RoomID);
END^

SET TERM ; ^


===================WYZWALACZ====================================
SET TERM ^ ;

CREATE OR ALTER TRIGGER AfterUpdateReservation
AFTER UPDATE ON Reservation
AS
BEGIN
    -- Sprawdzenie, czy kolumna CheckOutDate zosta≈Ça zmieniona
    IF (OLD.CheckOutDate IS DISTINCT FROM NEW.CheckOutDate) THEN
    BEGIN
        EXECUTE PROCEDURE MarkRoomAsAvailable(NEW.RoomID);
    END
END^

SET TERM ; ^




===================WYZWALACZ===================================


SET TERM ^ ;

CREATE OR ALTER TRIGGER RoomStatusCheckAfterUpdate
AFTER UPDATE ON Reservation
AS
DECLARE VARIABLE RoomID INTEGER;
BEGIN
    FOR SELECT ID
        FROM Room
        WHERE IsAvailable = 0
          AND NOT EXISTS (
              SELECT 1
              FROM Reservation
              WHERE RoomID = Room.ID
                AND CheckOutDate >= CURRENT_DATE
          )
    INTO :RoomID DO
    BEGIN
        EXECUTE PROCEDURE MarkRoomAsAvailable(:RoomID);
    END
END^

SET TERM ; ^



=======================================================
